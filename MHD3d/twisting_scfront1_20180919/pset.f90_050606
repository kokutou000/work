! ===========================================================
!      3D zero-beta nonlinear MHD Model 
!      NL3DpwD_f90_00 by Kanya Kusano (kusano@jamstec.go.jp)
! ===========================================================
!  Files:
!      RUN_NUMBER: if not exist, the calculation starts from the
!                  initial condition.
!                  if exits, read the last run_number from this file.
module pset
! -----------------------------------------------------------
!                    MODULE pset
! -----------------------------------------------------------
use common
use mpiut
use job

implicit none

integer :: index_x_check, index_y_check

public :: pset__init, &
          pset__resistivity, &
          pset__dt, &
          pset__namelist

private :: pset__x_grid, &
           pset__y_grid, &
           pset__z_grid

contains

! -----------------------------------------------------------
subroutine pset__init
integer :: isend, ierr
integer :: i,j,k

! ------------------------------<< sysout file >>
  open(FILE_SYSOUT,file=trim(cfile_sysout)//cmyrank, &
       form='formatted')
! ------------------------------<< run number >>
  
  if(myrank == root) then

    open(FILE_RUN_NUMBER,file=trim(cfile_run_number),form='formatted')
       run_number = 0
       do
          read(FILE_RUN_NUMBER,*,end=101) run_number
       end do
101    run_number = run_number + 1
!
       write(FILE_RUN_NUMBER,*) run_number   ! wrtie the current run_number 
    close(FILE_RUN_NUMBER)

  end if

! ------------------------------<<send run_number to other nodes>>

    isend = run_number
    call mpi_bcast(isend,1,MPI_INTEGER, &
                   root,MPI_COMM_CART,ierr)
    run_number = isend

!========= DEBUG
!    write(*,*) '::>> pset__init: run_number',run_number
!=========


    crun_number = '_'//chari2(run_number)

! ================ start from initial ==================
    if(run_number == 1) then
         start_from_initial = .true.
     else
         start_from_initial = .false.
    end if
! ======================================================

! ------------------------------<< open coordinate file >>

 open(FILE_COORDINATE_X,file=trim(cfile_coordinate_x)//cmyrank, &
      form='formatted')
 open(FILE_COORDINATE_Y,file=trim(cfile_coordinate_y)//cmyrank, &
      form='formatted')
 open(FILE_COORDINATE_Z,file=trim(cfile_coordinate_z)//cmyrank, &
      form='formatted')

! ------------------------------<< output file >>

if(myrank == root) then
 open(FILE_TIME_LIST,   file=trim(cfile_time_list)//crun_number, &
      form='formatted')
end if

 open(FILE_OUTPUT_LIST, file=trim(cfile_output_list)//crun_number//cmyrank, &
      form='formatted')

 write(FILE_OUTPUT_LIST,*) 
 write(FILE_OUTPUT_LIST,*) ' ++ 3D zero-beta nonlinear MHD MODEL ++'
 write(FILE_OUTPUT_LIST,*) ' NX, NY, NZ = ',nx,ny,nz
 write(FILE_OUTPUT_LIST,*) 

 write(FILE_OUTPUT_LIST,nml=nlist00)
 write(FILE_OUTPUT_LIST,nml=nlist01)
 write(FILE_OUTPUT_LIST,nml=nlist02)
 write(FILE_OUTPUT_LIST,nml=nlist03)
 write(FILE_OUTPUT_LIST,nml=nlist04)
 write(FILE_OUTPUT_LIST,nml=nlist05)
 write(FILE_OUTPUT_LIST,nml=nlist06)

! -------------------------------<< set grid coordinate >>

  call pset__x_grid
  call pset__y_grid
  call pset__z_grid
!
! .... coefficient at the center for the laplacian operator

  do i = -1, NX
  do j = -1, NY
  do k =  0, NZ
     d2xyz0(k,j,i) = d2x(i,0)+d2y(j,0)+d2z(k,0)
  end do
  end do
  end do

! -------------------------------<< set physical parameter >>

  gamma1 = gamma - 1.0d0

end subroutine pset__init

! -----------------------------------------------------------
subroutine pset__namelist
!
! ++++ input parameter ++++
!
open(FILE_NAMELIST,file='NAMELIST')

      read(FILE_NAMELIST,nml=nlist00)
      read(FILE_NAMELIST,nml=nlist01)
      read(FILE_NAMELIST,nml=nlist02)
      read(FILE_NAMELIST,nml=nlist03)
      read(FILE_NAMELIST,nml=nlist04)
      read(FILE_NAMELIST,nml=nlist05)
      read(FILE_NAMELIST,nml=nlist06)
      read(FILE_NAMELIST,nml=nlist07)
      read(FILE_NAMELIST,nml=nlist08)

close(FILE_NAMELIST)

! ==============================WARNING============================
if(nloop_output .gt. nloop_incmax) then
   write(FILE_SYSOUT) ':: WARNING : nloop_output > nloop_incmax ', &
   nloop_output, nloop_incmax
end if

end subroutine pset__namelist

! -----------------------------------------------------------
subroutine pset__x_grid

real(DP) :: delx, xi0, dxmin, dxmax, dxchg, bunbo
real(DP) :: xleft ! uniform x coordinate at the left end
real(DP) :: xright ! uniform x coordinate at the right end
real(DP) :: xlength ! uniform x length included in this rank
integer :: i
!

   xlength = xl / nproc_x
    
       delx = xlength / nx
       xleft = xlength * index_x
       xright= xleft + xlength
!#### debug ####
! write(*,*) '##pset__x_grid index_x, xleft,xlength', index_x, xleft,xlength
!###############

      do i = -1, nx
         xi0 = xleft + delx*i
         xc(i) = xi0 + epsx*xl/(PI2)*sin(PI2*xi0/xl)
      end do
!
      do i =-1, nxm1
         dx(i) = xc(i+1) - xc(i)
        ddx(i) = 1.0d0/dx(i)
        if(i.eq.-1) then
           dxmin = dx(i)
           dxmax = dx(i)
         else
           dxmin = min(dx(i), dxmin)
           dxmax = max(dx(i), dxmax)
        end if
        if(i.eq.0) then
           dxchg = abs(dx(i)-dx(i-1))/dx(i)
         else if(i.gt.0) then
           dxchg = max(dxchg, abs(dx(i)-dx(i-1))/dx(i))
        end if
      end do
!
      dx(nx) = dx(nxm1)
      ddx(nx)= ddx(nxm1)
!
      do i = 0, nx
         dx2(i) = dx(i-1) + dx(i)
        ddx2(i) = 1.0d0/dx2(i)
!
         bunbo = 1.0d0/(dx(i-1)*dx(i)*dx2(i))
         d1x(i,-1) = -dx(i)**2*bunbo
         d1x(i, 0) = (dx(i)**2-dx(i-1)**2)*bunbo
         d1x(i, 1) =  dx(i-1)**2*bunbo
!
         d2x(i,-1) = 2*dx (i  )*bunbo
         d2x(i, 0) =-2*dx2(i  )*bunbo
         d2x(i, 1) = 2*dx (i-1)*bunbo

      end do

! ------------- print minimum and maximum grid size ---------
      write(FILE_OUTPUT_LIST,*) ':: set_x_grid : ',dxmin, dxmax, dxchg
! -----------------------------------------------------------

! ------------- write coordinate file X ---------------------
!  if(run_number == 1) then
      write(FILE_COORDINATE_X,*) index_x, index_y, nx, ny, nz
      write(FILE_COORDINATE_X,'(e25.16)') xc
!  else
!     read(FILE_COORDINATE_X,*) index_x_check, index_y_check
!     call job__check_equal(index_x, index_x_check, '**X**')
!     call job__check_equal(index_y, index_y_check, '**Y**')
!  end if 
! -----------------------------------------------------------
end subroutine pset__x_grid

! -----------------------------------------------------------
subroutine pset__y_grid

implicit none
real(DP) :: dely, yj0, dymin, dymax, dychg, bunbo
real(DP) :: ybottom ! uniform y coordinate at the bottom
real(DP) :: ytop ! uniform y coordinate at the top
real(DP) :: ylength ! uniform y length included in this rank
integer :: j
!
   ylength = yl / nproc_y

      dely = ylength / ny
      ybottom = ylength * index_y
      ytop    = ybottom + ylength
      do j = -1, ny
         yj0 = ybottom + dely*j
         yc(j) =yj0 + epsy*yl/(PI2)*sin(PI2*yj0/yl)
      end do
!
      do j =-1, nym1
         dy(j) = yc(j+1) - yc(j)
        ddy(j) = 1.0d0/dy(j)
        if(j.eq.-1) then
           dymin = dy(j)
           dymax = dy(j)
         else
           dymin = min(dy(j), dymin)
           dymax = max(dy(j), dymax)
        end if
        if(j.eq.0) then
           dychg = abs(dy(j)-dy(j-1))/dy(j)
         else if(j.gt.0) then
           dychg = max(dychg, abs(dy(j)-dy(j-1))/dy(j))
        end if
       end do
!
      dy(ny) = dy(nym1)
      ddy(ny)= ddy(nym1)
!
      do j = 0, nym1
         dy2(j) = dy(j-1) + dy(j)
        ddy2(j) = 1.0d0/dy2(j)
!
         bunbo = 1.0d0/(dy(j-1)*dy(j)*dy2(j))
         d1y(j,-1) = -dy(j)**2*bunbo
         d1y(j, 0) = (dy(j)**2-dy(j-1)**2)*bunbo
         d1y(j, 1) =  dy(j-1)**2*bunbo
!
         d2y(j,-1) = 2*dy (j  )*bunbo
         d2y(j, 0) =-2*dy2(j  )*bunbo
         d2y(j, 1) = 2*dy (j-1)*bunbo
      end do
!
      j = 0
!
         dy2(j) = dy(j)
        ddy2(j) = 1.0d0/dy2(j)

         bunbo = 1./(dy(j)*dy(j+1)*dy2(j+1))
         d1y_0(-1) = -dy (j+1)*(dy(j+1)+2*dy(j))*bunbo
         d1y_0( 0) =  dy2(j+1)**2*bunbo
         d1y_0( 1) = -dy (j)**2*bunbo
!
         d2y_0(-1) = 2*dy (j+1)*bunbo
         d2y_0( 0) =-2*dy2(j+1)*bunbo
         d2y_0( 1) = 2*dy (j  )*bunbo
!
      j = ny
!
         dy2(j) = dy(j)
        ddy2(j) = 1.0d0/dy2(j)

         bunbo = 1./(dy(j-1)*dy(j-2)*dy2(j-1))
         d1y_ny(-1) =  dy (j-1)**2*bunbo
         d1y_ny( 0) = -dy2(j-1)**2*bunbo
         d1y_ny( 1) =  dy (j-2)*(dy(j-2)+2*dy(j-1))*bunbo
!
         d2y_ny(-1) = 2*dy (j-1)*bunbo
         d2y_ny( 0) =-2*dy2(j-1)*bunbo
         d2y_ny( 1) = 2*dy (j-2)*bunbo         

! ------------- print minimum and maximum grid size ---------
      write(FILE_OUTPUT_LIST,*) ':: set_y_grid : ',dymin, dymax, dychg
! -----------------------------------------------------------

! ------------- write coordinate file Y ---------------------
!  if(run_number == 1) then
      write(FILE_COORDINATE_Y,*) index_x, index_y, nx, ny, nz
      write(FILE_COORDINATE_Y,'(e25.16)') yc
!  else
!     read(FILE_COORDINATE_Y,*) index_x_check, index_y_check
!     call job__check_equal(index_x, index_x_check, '**X**')
!     call job__check_equal(index_y, index_y_check, '**y**')
!  end if 
! -----------------------------------------------------------
end subroutine pset__y_grid

! -----------------------------------------------------------
subroutine pset__z_grid

implicit none
real(DP) :: fraction_fine_grid, &
            z1, delz, zca, zcb, zcc, zcd, &
            zk, dzmin, dzmax, dzchg, &
            bunbo
integer :: k

!  >>> fraction of grid number for z < epsz
      fraction_fine_grid = 0.75
      z1=epsz/zl
      delz = z1/fraction_fine_grid
!
      zca = (1.-z1-delz*(1.0-fraction_fine_grid)) &     
           /(1.0 &
            -3*fraction_fine_grid &
            +3*fraction_fine_grid**2 &
            -  fraction_fine_grid**3)
      zcb = -3*zca*fraction_fine_grid
      zcc = delz-3*zca*fraction_fine_grid**2 &
                -2*zcb*fraction_fine_grid
      zcd = 1.0-(zca+zcb+zcc)
!
      do k = 0, nz
         zk = float(k)/float(nz)
         if(k.le.nz*fraction_fine_grid) then
            zc(k) = delz*zk*zl
         else
            zc(k) =(zca*zk**3+zcb*zk**2+zcc*zk+zcd)*zl
         end if
      end do
      zc(0) = 0.0
      zc(nz) = zl
!
      do k = 0, nzm1
         dz(k) = zc(k+1) - zc(k)
        ddz(k) = 1.0d0/dz(k)
        if(k.eq.0) then
           dzmin = dz(k)
           dzmax = dz(k)
         else
           dzmin = min(dz(k), dzmin)
           dzmax = max(dz(k), dzmax)
        end if
        if(k.eq.1) then
           dzchg = abs(dz(k)-dz(k-1))/dz(k)
         else if(k.gt.1) then
           dzchg = max(dzchg, abs(dz(k)-dz(k-1))/dz(k))
        end if
      end do

      dz(nz) = dz(nzm1)
      ddz(nz) = ddz(nzm1)
!
      do k = 1, nzm1
         dz2(k) = dz(k-1) + dz(k)
        ddz2(k) = 1.0d0/dz2(k)
!
         bunbo = 1./(dz(k)*dz(k-1)*dz2(k))
         d1z(k,-1) = -dz(k)**2*bunbo
         d1z(k, 0) = (dz(k)**2-dz(k-1)**2)*bunbo
         d1z(k, 1) =  dz(k-1)**2*bunbo
!
         d2z(k,-1) = 2*dz (k  )*bunbo
         d2z(k, 0) =-2*dz2(k  )*bunbo
         d2z(k, 1) = 2*dz (k-1)*bunbo
      end do
!
!
      k = 0
!
         dz2(k) = dz(k)
        ddz2(k) = 1.0d0/dz2(k)

         bunbo = 1./(dz(k)*dz(k+1)*dz2(k+1))
         d1z(k,-1) = -dz (k+1)*(dz(k+1)+2*dz(k))*bunbo
         d1z(k, 0) =  dz2(k+1)**2*bunbo
         d1z(k, 1) = -dz (k)**2*bunbo
!
         d2z(k,-1) = 2*dz (k+1)*bunbo
         d2z(k, 0) =-2*dz2(k+1)*bunbo
         d2z(k, 1) = 2*dz (k  )*bunbo
!
      k = nz
!
         dz2(k) = dz(k)
        ddz2(k) = 1.0d0/dz2(k)

         bunbo = 1./(dz(k-1)*dz(k-2)*dz2(k-1))
         d1z(k,-1) =  dz (k-1)**2*bunbo
         d1z(k, 0) = -dz2(k-1)**2*bunbo
         d1z(k, 1) =  dz (k-2)*(dz(k-2)+2*dz(k-1))*bunbo
!
         d2z(k,-1) = 2*dz (k-1)*bunbo
         d2z(k, 0) =-2*dz2(k-1)*bunbo
         d2z(k, 1) = 2*dz (k-2)*bunbo         

! ------------- print minimum and maximum grid size ---------
      write(FILE_OUTPUT_LIST,*) ':: set_z_grid : ',dzmin, dzmax, dzchg
! -----------------------------------------------------------

! ------------- write coordinate file Z ---------------------
      write(FILE_COORDINATE_Z,*) index_x, index_y, nx, ny, nz
      write(FILE_COORDINATE_Z,'(e25.16)') zc
! -----------------------------------------------------------
end subroutine pset__z_grid

! -----------------------------------------------------------
subroutine pset__resistivity

implicit none
real(DP) :: cc
integer :: i,j,k

      do i =-1, NX
      do j =-1, NY
      do k = 0, NZ
         cc = sqrt(cx(k,j,i)**2 &
                  +cy(k,j,i)**2 &
                  +cz(k,j,i)**2)    ! current density
         if(cc.gt.cc0) then
            res(k,j,i) = eta + eta1*((cc-cc0)/cc0)**2 ! anomalous resistivity
         else
            res(k,j,i) = eta ! uniform resistivity
         end if
      end do
      end do
      end do

! ----------------------------top & bottom
       res(0,:,:) = 0.0d0
       res(nz,:,:)= 0.0d0
! ----------------------------

! ----------------------------lateral
       if(index_y.eq.0)        res(:,0,:) = 0.0
       if(index_y.eq.nproc_y-1)  res(:,ny,:)= 0.0
! ----------------------------
end subroutine pset__resistivity
! -----------------------------------------------------------
subroutine pset__dt
!  set the time step and apply the limiter to density and 
!  and pressure.
! 2005/05/30 acoustic wave is taken into account.
!
implicit none
real(DP) :: fast_wave, ttx, tty, ttz, dt
integer :: i,j,k
!
      dt = 1.0d0/NY
!
      do i = 0, NX-1
      do j = 0, NY
      do k = 0, NZ-1
!
! === density & pressure limiter ============================
         if(ro(k,j,i).le.ro_min) ro(k,j,i) = ro_min
         if(pr(k,j,i).le.pr_min) pr(k,j,i) = pr_min
! ===========================================================
!
         fast_wave = sqrt((gamma*pr(k,j,i)+ &
                           bx(k,j,i)**2+ &
                           by(k,j,i)**2+ &
                           bz(k,j,i)**2) &
                          /ro(k,j,i))
!
           ttx = dx(i) / ( abs(vx(k,j,i)) + fast_wave )
           tty = dy(j) / ( abs(vy(k,j,i)) + fast_wave ) 
           ttz = dz(k) / ( abs(vz(k,j,i)) + fast_wave ) 
           dt = min(dt,ttx,tty,ttz)
!
      end do
      end do
      end do

      dtstep = dt*cfr

! ##### debug #####
!      write(*,*) '## pset__dt: dtstep, myrank ', dtstep, myrank,index_x,index_y
! #################

      call mpiut__min(dtstep)

      return

end subroutine pset__dt

end module pset






